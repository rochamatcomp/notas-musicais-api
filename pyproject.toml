[tool.poetry]
name = "notas-musicais-api"
version = "0.1.0"
description = "API para [Notas musicais](https://github.com/dunossauro/notas-musicais), para ajudar na formação de escalas, acordes e campos harmônicos"
authors = ["André Rocha <rocha.matcomp@gmail.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.11"
fastapi = "^0.111.0"
notas-musicais = { git = "https://github.com/rochamatcomp/notas-musicais.git" }

[tool.poetry.group.dev.dependencies]
pytest = "^8.2.2"
pytest-cov = "^5.0.0"
taskipy = "^1.12.2"
ruff = "^0.4.8"
httpx = "^0.27.0"
pytest-clarity = "^1.0.1"
ipython = "^8.25.0"
ipdb = "^0.13.13"

[tool.ruff]
line-length = 79
extend-exclude = ['migrations']

[tool.ruff.lint]
preview = true
# https://docs.astral.sh/ruff/rules/
# I (Isort): Checagem de ordenação de imports em ordem alfabética
# F (Pyflakes): Procura por alguns erros em relação a boas práticas de código
# E (Erros pycodestyle): Erros de estilo de código
# W (Avisos pycodestyle): Avisos de coisas não recomendadas no estilo de código
# PL (Pylint): Como o F, também procura por erros em relação a boas práticas de código
# PT (flake8-pytest): Checagem de boas práticas do Pytest
select = ['I', 'F', 'E', 'W', 'PL', 'PT']

[tool.ruff.format]
preview = true
quote-style = 'single'

[tool.pytest.ini_options]
pythonpath = "."
# Disabling warning capture entirely
addopts = '-p no:warnings'

[tool.taskipy.tasks]
lint = 'ruff check . && ruff check . --diff'
format = 'ruff check . --fix && ruff format .'
run = 'fastapi dev notas_musicais_api/app.py'
pre_test = 'task lint'
# --capture=method  Per-test capturing method: one of fd|sys|no|tee-sys
# --exitfirst       Exit instantly on first error or failed test
# --cov=path        Path or package name to measure during execution
# -vv               Increase verbosity
test = 'pytest --capture=no --exitfirst --cov=notas_musicais_api -vv'
post_test = 'coverage html'

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
